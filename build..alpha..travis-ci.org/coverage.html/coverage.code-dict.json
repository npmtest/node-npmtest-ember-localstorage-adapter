{"/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/test.js":"/* istanbul instrument in package npmtest_ember_localstorage_adapter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/lib.npmtest_ember_localstorage_adapter.js":"/* istanbul instrument in package npmtest_ember_localstorage_adapter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_localstorage_adapter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_localstorage_adapter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-localstorage-adapter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_localstorage_adapter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_localstorage_adapter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_localstorage_adapter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_localstorage_adapter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_localstorage_adapter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_localstorage_adapter.__dirname + '/lib.npmtest_ember_localstorage_adapter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-localstorage-adapter'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/addon/adapters/ls-adapter.js":"import Ember from 'ember';\nimport DS from 'ember-data';\n\nconst DEFAULT_NAMESPACE = 'DS.LSAdapter';\n\nconst LSAdapter = DS.Adapter.extend(Ember.Evented, {\n  /**\n   * This governs if promises will be resolved immediately for `findAll`\n   * requests or if they will wait for the store requests to finish. This matches\n   * the ember < 2.0 behavior.\n   * [deprecation id: ds.adapter.should-reload-all-default-behavior]\n   */\n  shouldReloadAll: function(/* modelClass, snapshotArray */) {\n    return true;\n  },\n\n  /**\n   * Conforms to ember <2.0 behavior, in order to remove deprecation.\n   * Probably safe to remove if running on ember 2.0\n   * [deprecation id: ds.model.relationship-changing-to-asynchrounous-by-default]\n   */\n  shouldBackgroundReloadRecord: function(){\n    return false;\n  },\n\n  /**\n    This is the main entry point into finding records. The first parameter to\n    this method is the model's name as a string.\n\n    @method find\n    @param {DS.Model} type\n    @param {Object|String|Integer|null} id\n    */\n  findRecord: function(store, type, id, opts) {\n    var allowRecursive = true;\n    var namespace = this._namespaceForType(type);\n    var record = Ember.A(namespace.records[id]);\n\n    /**\n     * In the case where there are relationships, this method is called again\n     * for each relation. Given the relations have references to the main\n     * object, we use allowRecursive to avoid going further into infinite\n     * recursiveness.\n     *\n     * Concept from ember-indexdb-adapter\n     */\n    if (opts && typeof opts.allowRecursive !== 'undefined') {\n      allowRecursive = opts.allowRecursive;\n    }\n\n    if (!record || !record.hasOwnProperty('id')) {\n      return Ember.RSVP.reject(new Error(\"Couldn't find record of\" + \" type '\" + type.modelName + \"' for the id '\" + id + \"'.\"));\n    }\n\n    if (allowRecursive) {\n      return this.loadRelationships(store, type, record);\n    } else {\n      return Ember.RSVP.resolve(record);\n    }\n  },\n\n  findMany: function (store, type, ids, opts) {\n    var namespace = this._namespaceForType(type);\n    var allowRecursive = true,\n      results = Ember.A([]), record;\n\n    /**\n     * In the case where there are relationships, this method is called again\n     * for each relation. Given the relations have references to the main\n     * object, we use allowRecursive to avoid going further into infinite\n     * recursiveness.\n     *\n     * Concept from ember-indexdb-adapter\n     */\n    if (opts && typeof opts.allowRecursive !== 'undefined') {\n      allowRecursive = opts.allowRecursive;\n    }\n\n    for (var i = 0; i < ids.length; i++) {\n      record = namespace.records[ids[i]];\n      if (!record || !record.hasOwnProperty('id')) {\n        return Ember.RSVP.reject(new Error(\"Couldn't find record of type '\" + type.modelName + \"' for the id '\" + ids[i] + \"'.\"));\n      }\n      results.push(Ember.copy(record));\n    }\n\n    if (results.get('length') && allowRecursive) {\n      return this.loadRelationshipsForMany(store, type, results);\n    } else {\n      return Ember.RSVP.resolve(results);\n    }\n  },\n\n  // Supports queries that look like this:\n  //\n  //   {\n  //     <property to query>: <value or regex (for strings) to match>,\n  //     ...\n  //   }\n  //\n  // Every property added to the query is an \"AND\" query, not \"OR\"\n  //\n  // Example:\n  //\n  //  match records with \"complete: true\" and the name \"foo\" or \"bar\"\n  //\n  //    { complete: true, name: /foo|bar/ }\n  query: function (store, type, query /*recordArray*/) {\n    var namespace = this._namespaceForType(type);\n    var results = this._query(namespace.records, query);\n\n    if (results.get('length')) {\n      return this.loadRelationshipsForMany(store, type, results);\n    } else {\n      return Ember.RSVP.resolve(results);\n    }\n  },\n\n  _query: function (records, query) {\n    var results = Ember.A([]), record;\n\n    function recordMatchesQuery(record) {\n      return Object.keys(query).every(function(property) {\n        var test = query[property];\n        if (Object.prototype.toString.call(test) === '[object RegExp]') {\n          return test.test(record[property]);\n        } else {\n          return record[property] === test;\n        }\n      });\n    }\n\n    for (var id in records) {\n      record = records[id];\n      if (recordMatchesQuery(record)) {\n        results.push(Ember.copy(record));\n      }\n    }\n    return results;\n  },\n\n  findAll: function (store, type) {\n    var namespace = this._namespaceForType(type),\n      results = Ember.A([]);\n\n    for (var id in namespace.records) {\n      results.push(Ember.copy(namespace.records[id]));\n    }\n    return Ember.RSVP.resolve(results);\n  },\n\n  createRecord: function (store, type, snapshot) {\n    var namespaceRecords = this._namespaceForType(type);\n    var serializer = store.serializerFor(type.modelName);\n    var recordHash = serializer.serialize(snapshot, {includeId: true});\n\n    namespaceRecords.records[recordHash.id] = recordHash;\n\n    this.persistData(type, namespaceRecords);\n    return Ember.RSVP.resolve();\n  },\n\n  updateRecord: function (store, type, snapshot) {\n    var namespaceRecords = this._namespaceForType(type);\n    var id = snapshot.id;\n    var serializer = store.serializerFor(type.modelName);\n\n    namespaceRecords.records[id] = serializer.serialize(snapshot, {includeId: true});\n\n    this.persistData(type, namespaceRecords);\n    return Ember.RSVP.resolve();\n  },\n\n  deleteRecord: function (store, type, snapshot) {\n    var namespaceRecords = this._namespaceForType(type);\n    var id = snapshot.id;\n\n    delete namespaceRecords.records[id];\n\n    this.persistData(type, namespaceRecords);\n    return Ember.RSVP.resolve();\n  },\n\n  generateIdForRecord: function () {\n    return Math.random().toString(32).slice(2).substr(0, 5);\n  },\n\n  // private\n\n  adapterNamespace: function () {\n    return this.get('namespace') || DEFAULT_NAMESPACE;\n  },\n\n  loadData: function () {\n    var storage = this.getLocalStorage().getItem(this.adapterNamespace());\n    return storage ? JSON.parse(storage) : {};\n  },\n\n  persistData: function(type, data) {\n    var modelNamespace = this.modelNamespace(type);\n    var localStorageData = this.loadData();\n\n    localStorageData[modelNamespace] = data;\n\n    this.getLocalStorage().setItem(this.adapterNamespace(), JSON.stringify(localStorageData));\n  },\n\n  getLocalStorage: function() {\n    if (this._localStorage) { return this._localStorage; }\n\n    var storage;\n    try {\n      storage = this.getNativeStorage() || this._enableInMemoryStorage();\n    } catch (e) {\n      storage = this._enableInMemoryStorage(e);\n    }\n    this._localStorage = storage;\n    return this._localStorage;\n  },\n\n  _enableInMemoryStorage: function(reason) {\n    this.trigger('persistenceUnavailable', reason);\n    return {\n      storage: {},\n      getItem: function(name) {\n        return this.storage[name];\n      },\n      setItem: function(name, value) {\n        this.storage[name] = value;\n      }\n    };\n  },\n\n  // This exists primarily as a testing extension point\n  getNativeStorage: function() {\n    return localStorage;\n  },\n\n  _namespaceForType: function (type) {\n    var namespace = this.modelNamespace(type);\n    var storage   = this.loadData();\n\n    return storage[namespace] || {records: {}};\n  },\n\n  modelNamespace: function(type) {\n    return type.url || type.modelName;\n  },\n\n\n  /**\n   * This takes a record, then analyzes the model relationships and replaces\n   * ids with the actual values.\n   *\n   * Stolen from ember-indexdb-adapter\n   *\n   * Consider the following JSON is entered:\n   *\n   * ```js\n   * {\n   *   \"id\": 1,\n   *   \"title\": \"Rails Rambo\",\n   *   \"comments\": [1, 2]\n   * }\n   *\n   * This will return:\n   *\n   * ```js\n   * {\n   *   \"id\": 1,\n   *   \"title\": \"Rails Rambo\",\n   *   \"comments\": [1, 2]\n   *\n   *   \"_embedded\": {\n   *     \"comment\": [{\n   *       \"_id\": 1,\n   *       \"comment_title\": \"FIRST\"\n   *     }, {\n   *       \"_id\": 2,\n   *       \"comment_title\": \"Rails is unagi\"\n   *     }]\n   *   }\n   * }\n   *\n   * This way, whenever a resource returned, its relationships will be also\n   * returned.\n   *\n   * @method loadRelationships\n   * @private\n   * @param {DS.Model} type\n   * @param {Object} record\n   */\n  loadRelationships: function(store, type, record) {\n    var adapter = this,\n      relationshipNames, relationships;\n\n    /**\n     * Create a chain of promises, so the relationships are\n     * loaded sequentially.  Think of the variable\n     * `recordPromise` as of the accumulator in a left fold.\n     */\n    var recordPromise = Ember.RSVP.resolve(record);\n\n    relationshipNames = Ember.get(type, 'relationshipNames');\n    relationships = relationshipNames.belongsTo\n    .concat(relationshipNames.hasMany);\n\n    relationships.forEach(function(relationName) {\n      var relationModel = type.typeForRelationship(relationName,store);\n      var relationEmbeddedId = record[relationName];\n      var relationProp  = adapter.relationshipProperties(type, relationName);\n      var relationType  = relationProp.kind;\n\n      var opts = {allowRecursive: false};\n\n      /**\n       * embeddedIds are ids of relations that are included in the main\n       * payload, such as:\n       *\n       * {\n       *    cart: {\n       *      id: \"s85fb\",\n       *      customer: \"rld9u\"\n       *    }\n       * }\n       *\n       * In this case, cart belongsTo customer and its id is present in the\n       * main payload. We find each of these records and add them to _embedded.\n       */\n      if (relationEmbeddedId && LSAdapter.prototype.isPrototypeOf(adapter))\n        {\n          recordPromise = recordPromise.then(function(recordPayload) {\n            var promise;\n            if (relationType === 'belongsTo' || relationType === 'hasOne') {\n              promise = adapter.findRecord(null, relationModel, relationEmbeddedId, opts);\n            } else if (relationType === 'hasMany') {\n              promise = adapter.findMany(null, relationModel, relationEmbeddedId, opts);\n            }\n\n            return promise.then(function(relationRecord) {\n              return adapter.addEmbeddedPayload(recordPayload, relationName, relationRecord);\n            });\n          });\n        }\n    });\n\n    return recordPromise;\n  },\n\n\n  /**\n   * Given the following payload,\n   *\n   *   {\n   *      cart: {\n   *        id: \"1\",\n   *        customer: \"2\"\n   *      }\n   *   }\n   *\n   * With `relationshipName` being `customer` and `relationshipRecord`\n   *\n   *   {id: \"2\", name: \"Rambo\"}\n   *\n   * This method returns the following payload:\n   *\n   *   {\n   *      cart: {\n   *        id: \"1\",\n   *        customer: \"2\"\n   *      },\n   *      _embedded: {\n   *        customer: {\n   *          id: \"2\",\n   *          name: \"Rambo\"\n   *        }\n   *      }\n   *   }\n   *\n   * which is then treated by the serializer later.\n   *\n   * @method addEmbeddedPayload\n   * @private\n   * @param {Object} payload\n   * @param {String} relationshipName\n   * @param {Object} relationshipRecord\n   */\n  addEmbeddedPayload: function(payload, relationshipName, relationshipRecord) {\n    var objectHasId = (relationshipRecord && relationshipRecord.id);\n    var arrayHasIds = (relationshipRecord.length && relationshipRecord.isEvery(\"id\"));\n    var isValidRelationship = (objectHasId || arrayHasIds);\n\n    if (isValidRelationship) {\n      if (!payload._embedded) {\n        payload._embedded = {};\n      }\n\n      payload._embedded[relationshipName] = relationshipRecord;\n      if (relationshipRecord.length) {\n        payload[relationshipName] = relationshipRecord.mapBy('id');\n      } else {\n        payload[relationshipName] = relationshipRecord.id;\n      }\n    }\n\n    if (this.isArray(payload[relationshipName])) {\n      payload[relationshipName] = payload[relationshipName].filter(function(id) {\n        return id;\n      });\n    }\n\n    return payload;\n  },\n\n\n  isArray: function(value) {\n    return Object.prototype.toString.call(value) === '[object Array]';\n  },\n\n  /**\n   * Same as `loadRelationships`, but for an array of records.\n   *\n   * @method loadRelationshipsForMany\n   * @private\n   * @param {DS.Model} type\n   * @param {Object} recordsArray\n   */\n  loadRelationshipsForMany: function(store, type, recordsArray) {\n    var adapter = this,\n      promise = Ember.RSVP.resolve(Ember.A([]));\n\n    /**\n     * Create a chain of promises, so the records are loaded sequentially.\n     * Think of the variable promise as of the accumulator in a left fold.\n     */\n    recordsArray.forEach(function(record) {\n      promise = promise.then(function(records) {\n        return adapter.loadRelationships(store, type, record)\n        .then(function(loadedRecord) {\n          records.push(loadedRecord);\n          return records;\n        });\n      });\n    });\n\n    return promise;\n  },\n\n\n  /**\n   *\n   * @method relationshipProperties\n   * @private\n   * @param {DS.Model} type\n   * @param {String} relationName\n   */\n  relationshipProperties: function(type, relationName) {\n    var relationships = Ember.get(type, 'relationshipsByName');\n    if (relationName) {\n      return relationships.get(relationName);\n    } else {\n      return relationships;\n    }\n  }\n});\n\nexport default LSAdapter;\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/addon/serializers/ls-serializer.js":"import Ember from 'ember';\nimport DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  /**\n   * Invokes the new serializer API.\n   * This should be removed in 2.0\n   */\n  isNewSerializerAPI: true,\n\n  serializeHasMany: function(snapshot, json, relationship) {\n    var key = relationship.key;\n    var payloadKey = this.keyForRelationship ? this.keyForRelationship(key, \"hasMany\") : key;\n    var relationshipType = snapshot.type.determineRelationshipType(relationship, this.store);\n\n    if (relationshipType === 'manyToNone' ||\n        relationshipType === 'manyToMany' ||\n          relationshipType === 'manyToOne') {\n      json[payloadKey] = snapshot.hasMany(key, { ids: true });\n    // TODO support for polymorphic manyToNone and manyToMany relationships\n    }\n  },\n\n  /**\n   * Extracts whatever was returned from the adapter.\n   *\n   * If the adapter returns relationships in an embedded way, such as follows:\n   *\n   * ```js\n   * {\n   *   \"id\": 1,\n   *   \"title\": \"Rails Rambo\",\n   *\n   *   \"_embedded\": {\n   *     \"comment\": [{\n   *       \"id\": 1,\n   *       \"comment_title\": \"FIRST\"\n   *     }, {\n   *       \"id\": 2,\n   *       \"comment_title\": \"Rails is unagi\"\n   *     }]\n   *   }\n   * }\n   *\n   * this method will create separated JSON for each resource and then combine\n   * the data and the embed payload into the JSON.Api spec for included objects\n   * returning a single object.\n   *\n   * @method extractSingle\n   * @private\n   * @param {DS.Store} store the returned store\n   * @param {DS.Model} type the type/model\n   * @param {Object} payload returned JSON\n   */\n  normalizeSingleResponse: function(store, type, payload) {\n    var included = Ember.A([]);\n    if (payload && payload._embedded) {\n      var forEachFunc = (record) => {\n        included.pushObject(this.normalize(relType,record).data);\n      };\n\n      for (var relation in payload._embedded) {\n        var relType = type.typeForRelationship(relation,store);\n          var embeddedPayload = payload._embedded[relation];\n\n        if (embeddedPayload) {\n          if (Ember.typeOf(embeddedPayload) === 'array') {\n            embeddedPayload.forEach(forEachFunc);\n          } else {\n            included.pushObject(this.normalize(relType, embeddedPayload).data);\n          }\n        }\n      }\n\n      delete payload._embedded;\n    }\n\n    var normalPayload = this.normalize(type, payload);\n    if(included.length > 0){\n      normalPayload.included = included;\n    }\n    return normalPayload;\n  },\n\n  /**\n   * This is exactly the same as extractSingle, but used in an array.\n   *\n   * @method extractSingle\n   * @private\n   * @param {DS.Store} store the returned store\n   * @param {DS.Model} type the type/model\n   * @param {Array} payload returned JSONs\n   */\n  normalizeArrayResponse: function(store, type, payload) {\n    var response = { data: Ember.A([]), included: Ember.A([]) };\n    payload.forEach((json) => {\n      var normalized = this.normalizeSingleResponse(store, type, json);\n      response.data.pushObject(normalized.data);\n\n      if(normalized.included){\n        normalized.included.forEach(function(included){\n          if(!response.included.includes(included.id)){\n            response.included.addObject(included);\n          }\n        });\n      }\n    });\n\n    return response;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/app/adapters/ls-adapter.js":"import LSAdapter from 'ember-localstorage-adapter/adapters/ls-adapter';\n\nexport default LSAdapter;\n","/home/travis/build/npmtest/node-npmtest-ember-localstorage-adapter/node_modules/ember-localstorage-adapter/app/serializers/ls-serializer.js":"import LSSerializer from 'ember-localstorage-adapter/serializers/ls-serializer';\n\nexport default LSSerializer;\n"}